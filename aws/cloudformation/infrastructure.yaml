AWSTemplateFormatVersion: '2010-09-09'
Description: 'Echo Platform - Distributed cloud architecture with AWS Lambda and DynamoDB'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name

Resources:
  # DynamoDB Tables for distributed storage
  GenerationRequestsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'echo_generation_requests_${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: request_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: request_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: user_id-timestamp-index
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  UserSessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'echo_user_sessions_${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: session_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: session_id
          KeyType: RANGE

  WebSocketConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'echo_websocket_connections_${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: connection_id
          AttributeType: S
      KeySchema:
        - AttributeName: connection_id
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  # S3 Bucket for generated images
  GeneratedImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'echo-generated-images-${Environment}-${AWS::AccountId}'
      PublicReadPolicy: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST]
            AllowedOrigins: ['*']
            MaxAge: 3000

  # Lambda Function for Image Generation
  ImageGeneratorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'echo-image-generator-${Environment}'
      Runtime: python3.9
      Handler: image_generator.lambda_handler
      Code:
        ZipFile: |
          # Code will be deployed separately
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'Function placeholder'}
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          DYNAMODB_TABLE: !Ref GenerationRequestsTable
          S3_BUCKET: !Ref GeneratedImagesBucket
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      MemorySize: 1024

  # Lambda Function for WebSocket handling
  WebSocketHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'echo-websocket-handler-${Environment}'
      Runtime: python3.9
      Handler: websocket_handler.lambda_handler
      Code:
        ZipFile: |
          # Code will be deployed separately
          def lambda_handler(event, context):
              return {'statusCode': 200}
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          CONNECTIONS_TABLE: !Ref WebSocketConnectionsTable
          REQUESTS_TABLE: !Ref GenerationRequestsTable
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30

  # API Gateway for REST endpoints
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'echo-api-${Environment}'
      Description: Echo Platform REST API
      EndpointConfiguration:
        Types: [REGIONAL]

  # WebSocket API for real-time communication
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub 'echo-websocket-${Environment}'
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action

  # WebSocket Routes
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      Target: !Sub 'integrations/${ConnectIntegration}'

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      Target: !Sub 'integrations/${DisconnectIntegration}'

  GenerationStatusRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: generation_status
      Target: !Sub 'integrations/${GenerationStatusIntegration}'

  # WebSocket Integrations
  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketHandlerFunction.Arn}/invocations'

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketHandlerFunction.Arn}/invocations'

  GenerationStatusIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketHandlerFunction.Arn}/invocations'

  # WebSocket Deployment and Stage
  WebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
      - GenerationStatusRoute
    Properties:
      ApiId: !Ref WebSocketApi

  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      DeploymentId: !Ref WebSocketDeployment
      StageName: !Ref Environment

  # IAM Role for Lambda functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'echo-lambda-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt GenerationRequestsTable.Arn
                  - !GetAtt UserSessionsTable.Arn
                  - !GetAtt WebSocketConnectionsTable.Arn
                  - !Sub '${GenerationRequestsTable.Arn}/index/*'
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource: '*'
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource: !Sub '${GeneratedImagesBucket}/*'
        - PolicyName: APIGatewayAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - execute-api:ManageConnections
                Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/*'

  # Lambda permissions for API Gateway
  WebSocketLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WebSocketHandlerFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/*'

Outputs:
  WebSocketApiEndpoint:
    Description: WebSocket API endpoint for real-time communication
    Value: !Sub 'wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-WebSocketEndpoint'

  RestApiEndpoint:
    Description: REST API endpoint
    Value: !Sub 'https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-RestApiEndpoint'

  GenerationRequestsTableName:
    Description: DynamoDB table for generation requests
    Value: !Ref GenerationRequestsTable
    Export:
      Name: !Sub '${AWS::StackName}-GenerationRequestsTable'

  GeneratedImagesBucketName:
    Description: S3 bucket for generated images
    Value: !Ref GeneratedImagesBucket
    Export:
      Name: !Sub '${AWS::StackName}-GeneratedImagesBucket'