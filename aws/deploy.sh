#!/bin/bash

# Echo Platform - AWS Deployment Script
# Deploys distributed cloud architecture with AWS Lambda and DynamoDB

set -e

ENVIRONMENT=${1:-dev}
REGION=${2:-us-west-2}
STACK_NAME="echo-platform-${ENVIRONMENT}"

echo "🚀 Deploying Echo Platform to AWS"
echo "Environment: ${ENVIRONMENT}"
echo "Region: ${REGION}"
echo "Stack Name: ${STACK_NAME}"

# Check if AWS CLI is configured
if ! aws sts get-caller-identity &> /dev/null; then
    echo "❌ AWS CLI not configured. Please run 'aws configure' first."
    exit 1
fi

# Create deployment package for Lambda functions
echo "📦 Creating deployment packages..."

# Package image generator function
cd lambda_functions
zip -r ../image_generator.zip image_generator.py
zip -r ../websocket_handler.zip websocket_handler.py
cd ..

# Deploy CloudFormation stack
echo "☁️ Deploying CloudFormation stack..."
aws cloudformation deploy \
    --template-file cloudformation/infrastructure.yaml \
    --stack-name ${STACK_NAME} \
    --parameter-overrides Environment=${ENVIRONMENT} \
    --capabilities CAPABILITY_NAMED_IAM \
    --region ${REGION}

if [ $? -eq 0 ]; then
    echo "✅ CloudFormation stack deployed successfully"
else
    echo "❌ CloudFormation deployment failed"
    exit 1
fi

# Get stack outputs
echo "📋 Getting stack outputs..."
WEBSOCKET_ENDPOINT=$(aws cloudformation describe-stacks \
    --stack-name ${STACK_NAME} \
    --region ${REGION} \
    --query 'Stacks[0].Outputs[?OutputKey==`WebSocketApiEndpoint`].OutputValue' \
    --output text)

REST_ENDPOINT=$(aws cloudformation describe-stacks \
    --stack-name ${STACK_NAME} \
    --region ${REGION} \
    --query 'Stacks[0].Outputs[?OutputKey==`RestApiEndpoint`].OutputValue' \
    --output text)

IMAGE_GENERATOR_FUNCTION=$(aws cloudformation describe-stacks \
    --stack-name ${STACK_NAME} \
    --region ${REGION} \
    --query 'Stacks[0].Outputs[?OutputKey==`ImageGeneratorFunction`].OutputValue' \
    --output text)

WEBSOCKET_HANDLER_FUNCTION=$(aws cloudformation describe-stacks \
    --stack-name ${STACK_NAME} \
    --region ${REGION} \
    --query 'Stacks[0].Outputs[?OutputKey==`WebSocketHandlerFunction`].OutputValue' \
    --output text)

# Update Lambda function code
echo "⚡ Updating Lambda function code..."

# Update image generator function
aws lambda update-function-code \
    --function-name "echo-image-generator-${ENVIRONMENT}" \
    --zip-file fileb://image_generator.zip \
    --region ${REGION}

# Update websocket handler function  
aws lambda update-function-code \
    --function-name "echo-websocket-handler-${ENVIRONMENT}" \
    --zip-file fileb://websocket_handler.zip \
    --region ${REGION}

# Clean up deployment packages
rm -f image_generator.zip websocket_handler.zip

echo "🎉 Deployment completed successfully!"
echo ""
echo "📍 Endpoints:"
echo "   WebSocket: ${WEBSOCKET_ENDPOINT}"
echo "   REST API:  ${REST_ENDPOINT}"
echo ""
echo "🏗️ Architecture:"
echo "   • AWS Lambda functions for serverless image generation"
echo "   • DynamoDB for distributed storage supporting unlimited revisions"
echo "   • WebSocket API for real-time communication"
echo "   • S3 for generated image storage"
echo "   • Auto-scaling without infrastructure management"
echo ""
echo "💡 This distributed architecture supports unlimited client revisions"
echo "   without infrastructure scaling costs, as mentioned in your resume!"

# Create environment configuration file
cat > ../config/aws_config.py << EOF
# AWS Configuration for Echo Platform
# Generated by deploy.sh on $(date)

import os

class AWSConfig:
    """AWS configuration for distributed cloud architecture"""
    
    # Environment
    ENVIRONMENT = '${ENVIRONMENT}'
    REGION = '${REGION}'
    
    # API Endpoints
    WEBSOCKET_ENDPOINT = '${WEBSOCKET_ENDPOINT}'
    REST_API_ENDPOINT = '${REST_ENDPOINT}'
    
    # Lambda Functions
    IMAGE_GENERATOR_FUNCTION = 'echo-image-generator-${ENVIRONMENT}'
    WEBSOCKET_HANDLER_FUNCTION = 'echo-websocket-handler-${ENVIRONMENT}'
    
    # DynamoDB Tables
    GENERATION_REQUESTS_TABLE = 'echo_generation_requests_${ENVIRONMENT}'
    USER_SESSIONS_TABLE = 'echo_user_sessions_${ENVIRONMENT}'
    WEBSOCKET_CONNECTIONS_TABLE = 'echo_websocket_connections_${ENVIRONMENT}'
    
    @classmethod
    def get_bedrock_client(cls):
        """Get configured Bedrock client"""
        import boto3
        return boto3.client('bedrock-runtime', region_name=cls.REGION)
    
    @classmethod
    def get_dynamodb_resource(cls):
        """Get configured DynamoDB resource"""
        import boto3
        return boto3.resource('dynamodb', region_name=cls.REGION)
    
    @classmethod
    def get_lambda_client(cls):
        """Get configured Lambda client"""
        import boto3
        return boto3.client('lambda', region_name=cls.REGION)
EOF

echo "⚙️ AWS configuration saved to config/aws_config.py"